                    
                    
┌──────────────────┐
│ 17 Code Findings │
└──────────────────┘
                                                                
    src/main/java/org/owasp/webgoat/lessons/AbstractLesson.java 
       contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url                
          A parameter being passed directly into java.net.URL function most     
  likely lead to SSRF.                                                          
          Details: https://sg.run/ndOd                                          
                                                                                
          694┆ public static Element readFromURL(String url) {
          695┆     ElementContainer ec = new ElementContainer();
          696┆ 
          697┆     try {
          698┆         URL u = new URL(url);
          699┆         HttpURLConnection huc = (HttpURLConnection)              
  u.openConnection();                                                           
          700┆         BufferedReader reader = new BufferedReader(new           
  InputStreamReader(huc.getInputStream()));                                     
          701┆         String line;
          702┆ 
          703┆         while ((line = reader.readLine()) != null) {
             [hid 11 additional lines, adjust with --max-lines-per-finding] 
       java.lang.security.audit.formatted-sql-string.formatted-sql-string       
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          623┆ ResultSet answer_results = answer_statement.executeQuery(query);
                                                          
    src/main/java/org/owasp/webgoat/lessons/Encoding.java 
       java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle           
          Using CBC with PKCS5Padding is susceptible to padding oracle attacks. 
  A malicious actor                                                             
          could discern the difference between plaintext with valid or invalid  
  padding. Further, CBC                                                         
          mode does not include any integrity checks. Use 'AES/GCM/NoPadding'   
  instead.                                                                      
          Details: https://sg.run/ydxr                                          
                                                                                
           ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
          325┆ Cipher passwordDecryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");                      
            ⋮┆----------------------------------------
           ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
          370┆ Cipher passwordEncryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");                      
            ⋮┆----------------------------------------
       java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated      
          DES is considered deprecated. AES is the recommended cipher. Upgrade  
  to use AES. See                                                               
          https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-
  data-encryption-                                                              
          standard for more information.                                        
          Details: https://sg.run/5Q73                                          
                                                                                
           ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
          325┆ Cipher passwordDecryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");                      
            ⋮┆----------------------------------------
           ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
          370┆ Cipher passwordEncryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");                      
            ⋮┆----------------------------------------
       java.lang.security.audit.crypto.use-of-md5.use-of-md5                    
          Detected MD5 hash algorithm which is considered insecure. MD5 is not  
  collision resistant and                                                       
          is therefore not suitable as a cryptographic signature. Use HMAC      
  instead.                                                                      
          Details: https://sg.run/ryJn                                          
                                                                                
           ▶▶┆ Autofix ▶ "SHA-512"
          465┆ md = MessageDigest.getInstance("MD5");
                                                                                
    src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonActi
  on.java                                                                       
       java.lang.security.audit.formatted-sql-string.formatted-sql-string       
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          252┆ ResultSet answer_results = answer_statement.executeQuery(query);
                                                                          
    src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/Login.java 
       java.lang.security.audit.formatted-sql-string.formatted-sql-string       
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          127┆ ResultSet answer_results = answer_statement.executeQuery(query);
                                                                    
    src/main/java/org/owasp/webgoat/lessons/SQLInjection/Login.java 
       java.lang.security.audit.formatted-sql-string.formatted-sql-string       
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          131┆ ResultSet answer_results = answer_statement.executeQuery(query);
            ⋮┆----------------------------------------
          166┆ ResultSet answer_results = answer_statement.executeQuery(query);
                                                                          
    src/main/java/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java 
       java.lang.security.audit.formatted-sql-string.formatted-sql-string       
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          108┆ ResultSet answer_results = answer_statement.executeQuery(query);
            ⋮┆----------------------------------------
          157┆ ResultSet answer_results = answer_statement.executeQuery(query);
                                                                
    src/main/java/org/owasp/webgoat/lessons/WsSAXInjection.java 
       contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader    
          XMLReader being instantiated without calling the setFeature functions 
  that are generally                                                            
          used for disabling entity processing                                  
          Details: https://sg.run/J9rR                                          
                                                                                
          158┆ XMLReader reader = XMLReaderFactory.createXMLReader();
            ⋮┆----------------------------------------
          158┆ XMLReader reader = XMLReaderFactory.createXMLReader();
          159┆ PasswordChanger changer = new PasswordChanger();
          160┆ reader.setContentHandler(changer);
          161┆ reader.parse(new InputSource(new StringReader(xml)));
                                                                
    src/main/java/org/owasp/webgoat/lessons/WsSqlInjection.java 
       java.lang.security.audit.formatted-sql-string.formatted-sql-string       
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          233┆ ResultSet results = statement.executeQuery(query);
                                                          
    src/main/java/org/owasp/webgoat/util/Interceptor.java 
       java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket    
          Detected use of a Java socket that is not encrypted. As a result, the 
  traffic could be read                                                         
          by an attacker intercepting the network traffic. Use an SSLSocket     
  created by                                                                    
          'SSLSocketFactory' or 'SSLServerSocketFactory' instead.               
          Details: https://sg.run/W8zA                                          
                                                                                
           88┆ osgSocket = new Socket(osgServerName,                            
  Integer.parseInt(osgServerPort));                                             
