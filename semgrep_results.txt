                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 117 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                                                
  [36m[22m[24m                                                                  
  newDesign/assets/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js [0m        
       [1m[24mgitlab.eslint.detect-non-literal-fs-filename[0m                   
          A variable is present in the filename argument of fs calls, this might
  allow an attacker to                                                          
          access anything on your system.                                       
          Details: https://sg.run/L09Y                                          
                                                                                
         2541‚îÜ [1m[24miframeDoc.open()[0m;
                                                                               
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/AbstractLesson.java [0m
       [1m[24mcontrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url[0m      
          A parameter being passed directly into java.net.URL function most     
  likely lead to SSRF.                                                          
          Details: https://sg.run/ndOd                                          
                                                                                
          694‚îÜ [1m[24mpublic static Element readFromURL(String url) {[0m
          695‚îÜ [1m[24m    ElementContainer ec = new ElementContainer();[0m
          696‚îÜ [1m[24m[0m
          697‚îÜ [1m[24m    try {[0m
          698‚îÜ [1m[24m        URL u = new URL(url);[0m
          699‚îÜ [1m[24m        HttpURLConnection huc = (HttpURLConnection)       
  u.openConnection();[0m                                                        
          700‚îÜ [1m[24m        BufferedReader reader = new BufferedReader(new    
  InputStreamReader(huc.getInputStream()));[0m                                  
          701‚îÜ [1m[24m        String line;[0m
          702‚îÜ [1m[24m[0m
          703‚îÜ [1m[24m        while ((line = reader.readLine()) != null) {[0m
             [hid 11 additional lines, adjust with --max-lines-per-finding] 
       [1m[24mjava.lang.security.audit.formatted-sql-string.formatted-sql-string
  [0m                                                                           
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          623‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
                                                                          
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/BackDoors.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-3[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/z561                                          
                                                                                
           63‚îÜ [1m[24mprivate final static String SELECT_ST = "select userid,   
  password, ssn, salary, email from employee where userid="[0m;                 
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/Challenge2Screen.java   
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
          109‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          121‚îÜ [1m[24mprivate String pass = "goodbye"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          109‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          153‚îÜ if (username.equals(user) && [1m[24mpassword.equals(pass)[0m)
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/ClientSideFiltering/ClientSideFilterin
  g.java [0m                                                                    
       [1m[24mgitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1[0m                       
          A file is opened to read its content. The filename comes from an input
  parameter. If an                                                              
          unfiltered parameter is passed to this file API, files from an        
  arbitrary filesystem location                                                 
          could be read. This rule identifies potential path traversal          
  vulnerabilities. In many cases,                                               
          the constructed file path cannot be controlled by the user.           
          Details: https://sg.run/R5KK                                          
                                                                                
          420‚îÜ is = new BufferedReader([1m[24mnew FileReader(new                
  File(content))[0m);                                                           
            ‚ãÆ‚îÜ----------------------------------------
          420‚îÜ is = new BufferedReader(new FileReader(new                       
  File([1m[24mcontent[0m)));                                                    
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/CsrfTokenByPass.java [0m
       [1m[24mgitlab.find_sec_bugs.PREDICTABLE_RANDOM-1[0m                      
          The use of a predictable random value can lead to vulnerabilities when
  used in certain                                                               
          security critical contexts. A quick fix could be to replace the use of
  java.util.Random with                                                         
          something stronger, such as java.security.SecureRandom.               
          Details: https://sg.run/1kbD                                          
                                                                                
           90‚îÜ token = [1m[24mrandom.nextInt()[0m;
                                                                             
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/DOMInjection.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           59‚îÜ [1m[24mprivate final static String KEY = "key"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           63‚îÜ [1m[24mprivate final static String key =                         
  "K1JFWP8BSO8HI52LNPQS8F5L01N"[0m;                                             
            ‚ãÆ‚îÜ----------------------------------------
           71‚îÜ if (fromAJAX.equalsIgnoreCase("ajax") && userKey.length() != 0 &&
  [1m[24muserKey.equals(key)[0m)                                                
                                                                       
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/DOMXSS.java [0m
       [1m[24mgitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1[0m                       
          A file is opened to read its content. The filename comes from an input
  parameter. If an                                                              
          unfiltered parameter is passed to this file API, files from an        
  arbitrary filesystem location                                                 
          could be read. This rule identifies potential path traversal          
  vulnerabilities. In many cases,                                               
          the constructed file path cannot be controlled by the user.           
          Details: https://sg.run/R5KK                                          
                                                                                
          290‚îÜ is = new BufferedReader([1m[24mnew FileReader(new                
  File(content))[0m);                                                           
            ‚ãÆ‚îÜ----------------------------------------
          290‚îÜ is = new BufferedReader(new FileReader(new                       
  File([1m[24mcontent[0m)));                                                    
                                                                          
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/DOS_Login.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           63‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ [1m[24mString password = ""[0m;
            ‚ãÆ‚îÜ----------------------------------------
           63‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
                                                                              
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/DangerousEval.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           61‚îÜ [1m[24mpublic final static String PASSED =                       
  "__DANGEROUS_EVAL_PASS"[0m;                                                   
                                                                         
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/Encoding.java [0m
       [1m[24mgitlab.find_sec_bugs.CIPHER_INTEGRITY-1[0m                        
          The ciphertext produced is susceptible to alteration by an adversary. 
  This mean that the                                                            
          cipher provides no way to detect that the data has been tampered with.
  If the ciphertext can                                                         
          be controlled by an attacker, it could be altered without detection.  
          Details: https://sg.run/O4Db                                          
                                                                                
          325‚îÜ Cipher passwordDecryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES[1m[24m/CBC/PKCS5Padding[0m");            
            ‚ãÆ‚îÜ----------------------------------------
          370‚îÜ Cipher passwordEncryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES[1m[24m/CBC/PKCS5Padding[0m");            
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           76‚îÜ [1m[24mprivate final static String KEY = "key"[0m;
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.PADDING_ORACLE-1[0m                          
          This specific mode of CBC with PKCS5Padding is susceptible to padding 
  oracle attacks. An                                                            
          adversary could potentially decrypt the message if the system exposed 
  the difference between                                                        
          plaintext with invalid padding or valid padding. The distinction      
  between valid and invalid                                                     
          padding is usually revealed through distinct error messages being     
  returned for each                                                             
          condition.                                                            
          Details: https://sg.run/eJ3E                                          
                                                                                
          325‚îÜ Cipher passwordDecryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES[1m[24m/CBC/PKCS5Padding[0m");            
            ‚ãÆ‚îÜ----------------------------------------
          370‚îÜ Cipher passwordEncryptCipher =                                   
  Cipher.getInstance("PBEWithMD5AndDES[1m[24m/CBC/PKCS5Padding[0m");            
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGES 
  T_SHA1-1[0m                                                                   
          DES is considered strong ciphers for modern applications. Currently,  
  NIST recommends the                                                           
          usage of AES block ciphers instead of DES.                            
          Details: https://sg.run/L2R7                                          
                                                                                
          465‚îÜ md = [1m[24mMessageDigest.getInstance("MD5")[0m;
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjava.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle[0m 
          Using CBC with PKCS5Padding is susceptible to padding oracle attacks. 
  A malicious actor                                                             
          could discern the difference between plaintext with valid or invalid  
  padding. Further, CBC                                                         
          mode does not include any integrity checks. Use 'AES/GCM/NoPadding'   
  instead.                                                                      
          Details: https://sg.run/ydxr                                          
                                                                                
  [32m[22m[24m         ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂[0m "AES/GCM/NoPadding"
          325‚îÜ Cipher passwordDecryptCipher =                                   
  Cipher.getInstance([1m[24m"PBEWithMD5AndDES/CBC/PKCS5Padding"[0m);            
            ‚ãÆ‚îÜ----------------------------------------
  [32m[22m[24m         ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂[0m "AES/GCM/NoPadding"
          370‚îÜ Cipher passwordEncryptCipher =                                   
  Cipher.getInstance([1m[24m"PBEWithMD5AndDES/CBC/PKCS5Padding"[0m);            
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjava.lang.security.audit.crypto.des-is-deprecated.des-is-deprecate
  [0m                                                                           
          DES is considered deprecated. AES is the recommended cipher. Upgrade  
  to use AES. See                                                               
          https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-
  data-encryption-                                                              
          standard for more information.                                        
          Details: https://sg.run/5Q73                                          
                                                                                
  [32m[22m[24m         ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂[0m "AES/GCM/NoPadding"
          325‚îÜ Cipher passwordDecryptCipher =                                   
  Cipher.getInstance([1m[24m"PBEWithMD5AndDES/CBC/PKCS5Padding"[0m);            
            ‚ãÆ‚îÜ----------------------------------------
  [32m[22m[24m         ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂[0m "AES/GCM/NoPadding"
          370‚îÜ Cipher passwordEncryptCipher =                                   
  Cipher.getInstance([1m[24m"PBEWithMD5AndDES/CBC/PKCS5Padding"[0m);            
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjava.lang.security.audit.crypto.use-of-md5.use-of-md5[0m          
          Detected MD5 hash algorithm which is considered insecure. MD5 is not  
  collision resistant and                                                       
          is therefore not suitable as a cryptographic signature. Use HMAC      
  instead.                                                                      
          Details: https://sg.run/ryJn                                          
                                                                                
  [32m[22m[24m         ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂[0m "SHA-512"
          465‚îÜ md = MessageDigest.getInstance([1m[24m"MD5"[0m);
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/FailOpenAuthentication.java [0m       
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           72‚îÜ [1m[24mString password = ""[0m;
            ‚ãÆ‚îÜ----------------------------------------
           80‚îÜ if (!"webgoat".equals(username) ||                               
  ![1m[24mpassword.equals("webgoat")[0m)                                        
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction
  .java [0m                                                                     
       [1m[24mjava.lang.security.audit.formatted-sql-string.formatted-sql-string
  [0m                                                                           
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          252‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/GoatHillsFinancial.
  java [0m                                                                      
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           54‚îÜ [1m[24mpublic final static String DESCRIPTION = "description"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ [1m[24mpublic final static String PASSWORD = "password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           92‚îÜ [1m[24mpublic final static String SEARCHRESULT_ATTRIBUTE_KEY =   
  "SearchResult"[0m;                                                            
            ‚ãÆ‚îÜ----------------------------------------
           94‚îÜ [1m[24mpublic final static String EMPLOYEE_ATTRIBUTE_KEY =       
  "Employee"[0m;                                                                
            ‚ãÆ‚îÜ----------------------------------------
           96‚îÜ [1m[24mpublic final static String STAFF_ATTRIBUTE_KEY =          
  "Staff"[0m;                                                                   
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ [1m[24mpublic final static String PASSWORD = "password"[0m;
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/Login.java [0m     
       [1m[24mjava.lang.security.audit.formatted-sql-string.formatted-sql-string
  [0m                                                                           
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          127‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
                                                                          
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/HtmlClues.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           64‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           64‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ return (username.equals("admin") &&                              
  [1m[24mpassword.equals("adminpw")[0m);                                        
                                                                              
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/InsecureLogin.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           30‚îÜ [1m[24mprivate final static String PASSWORD = "clear_pass"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          251‚îÜ [1m[24mString query = "SELECT * FROM user_data_tan WHERE         
  first_name = ? AND password = ?"[0m;                                          
                                                                            
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/LogSpoofing.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           59‚îÜ [1m[24mprivate static final String PASSWORD = "password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           59‚îÜ [1m[24mprivate static final String PASSWORD = "password"[0m;
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/MultiLevelLogin1.java   
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           61‚îÜ [1m[24mprivate final static String PASSWORD = "pass"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          203‚îÜ [1m[24mString password = ""[0m;
            ‚ãÆ‚îÜ----------------------------------------
          717‚îÜ [1m[24mString query = "SELECT * FROM user_data_tan WHERE         
  first_name = ? AND password = ?"[0m;                                          
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/MultiLevelLogin2.java   
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           61‚îÜ [1m[24mprivate final static String PASSWORD = "pass2"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          215‚îÜ [1m[24mString password = ""[0m;
            ‚ãÆ‚îÜ----------------------------------------
          725‚îÜ [1m[24mString query = "SELECT * FROM user_data_tan WHERE         
  first_name = ? AND password = ?"[0m;                                          
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/PasswordStrength.java   
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-3[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/z561                                          
                                                                                
          191‚îÜ [1m[24mString instructions = "The accounts of your web           
  application are only as safe as the passwords. "[0m                           
          192‚îÜ [1m[24m        + "For this exercise, your job is to test several 
  passwords on <a onclick=\"window.open(this.href,\'_blank\');return false;\"   
  href=\"https://ho ... [0m                                                     
          193‚îÜ [1m[24m        + " You must test all 6 passwords at the same     
  time...<br>"[0m                                                               
          194‚îÜ [1m[24m        + "<b> On your applications you should set good   
  password requirements! </b>"[0m;                                              
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/SQLInjection/Login.java 
  [0m                                                                           
       [1m[24mjava.lang.security.audit.formatted-sql-string.formatted-sql-string
  [0m                                                                           
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          131‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
            ‚ãÆ‚îÜ----------------------------------------
          166‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java [0m     
       [1m[24mjava.lang.security.audit.formatted-sql-string.formatted-sql-string
  [0m                                                                           
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          108‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
            ‚ãÆ‚îÜ----------------------------------------
          157‚îÜ ResultSet answer_results =                                       
  [1m[24manswer_statement.executeQuery(query)[0m;                               
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/SessionFixation.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           69‚îÜ [1m[24mprivate final static String PASSWORD = "pass3"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          462‚îÜ [1m[24mString query = "SELECT * FROM user_data_tan WHERE         
  first_name = ? AND password = ?"[0m;                                          
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.PREDICTABLE_RANDOM-1[0m                      
          The use of a predictable random value can lead to vulnerabilities when
  used in certain                                                               
          security critical contexts. A quick fix could be to replace the use of
  java.util.Random with                                                         
          something stronger, such as java.security.SecureRandom.               
          Details: https://sg.run/1kbD                                          
                                                                                
          797‚îÜ sid = String.valueOf(Math.abs([1m[24mrandom.nextInt()[0m %       
  100000));                                                                     
                                                                               
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/UncheckedEmail.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           70‚îÜ [1m[24mprivate final String YOUR_REAL_GMAIL_PASSWORD =           
  "password"[0m;                                                                
            ‚ãÆ‚îÜ----------------------------------------
           79‚îÜ [1m[24mprivate final static String GMAIL_PASS = "gPass"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ [1m[24mprivate final String YOUR_REAL_GMAIL_PASSWORD =           
  "password"[0m;                                                                
            ‚ãÆ‚îÜ----------------------------------------
          106‚îÜ boolean haveCredentials = !(YOUR_REAL_GMAIL_ID.equals(gId) ||    
  [1m[24mYOUR_REAL_GMAIL_PASSWORD.equals(gPass)[0m);                            
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1[0m                   
          Simple Mail Transfer Protocol (SMTP) is a the text based protocol used
  for email delivery.                                                           
          Like with HTTP, headers are separate by new line separator. If kuser  
  input is place in a                                                           
          header line, the application should remove or replace new line        
  characters (CR / LF). You                                                     
          should use a safe wrapper such as Apache Common Email and Simple Java 
  Mail which filter                                                             
          special characters that can lead to header injection.                 
          Details: https://sg.run/bWve                                          
                                                                                
          367‚îÜ [1m[24mmsg.setSubject(subject);[0m
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java [0m     
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           73‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           73‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          132‚îÜ if (username.equals("webgoat") &&                                
  [1m[24mpassword.equals("webgoat")[0m)                                         
            ‚ãÆ‚îÜ----------------------------------------
          136‚îÜ else if (username.equals("aspect") &&                            
  [1m[24mpassword.equals("aspect")[0m)                                          
                                                                              
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/WeakSessionID.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           68‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           68‚îÜ [1m[24mprotected final static String PASSWORD = "Password"[0m;
                                                                               
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/WsSAXInjection.java [0m
       [1m[24mcontrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLRea
  der[0m                                                                        
          XMLReader being instantiated without calling the setFeature functions 
  that are generally                                                            
          used for disabling entity processing                                  
          Details: https://sg.run/J9rR                                          
                                                                                
          158‚îÜ [1m[24mXMLReader reader = XMLReaderFactory.createXMLReader()[0m;
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ [1m[24mXMLReader reader = XMLReaderFactory.createXMLReader();[0m
          159‚îÜ [1m[24mPasswordChanger changer = new PasswordChanger();[0m
          160‚îÜ [1m[24mreader.setContentHandler(changer);[0m
          161‚îÜ [1m[24mreader.parse(new InputSource(new StringReader(xml)));[0m
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           65‚îÜ [1m[24mprivate final static String PASSWORD = "password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          184‚îÜ [1m[24mprivate static String PASSWORD_TAG = "password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           65‚îÜ [1m[24mprivate final static String PASSWORD = "password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           69‚îÜ [1m[24mprivate static String template1 = "<?xml version='1.0'    
  encoding='UTF-8'?>\n" + "<wsns0:Envelope\n"[0m                                
           70‚îÜ [1m[24m        + "                                               
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\n"[0m                   
           71‚îÜ [1m[24m        + "                                               
  xmlns:xsd='http://www.w3.org/2001/XMLSchema'\n"[0m                            
           72‚îÜ [1m[24m        + "                                               
  xmlns:wsns0='http://schemas.xmlsoap.org/soap/envelope/'\n"[0m                 
           73‚îÜ [1m[24m        + "                                               
  xmlns:wsns1='http://lessons.webgoat.owasp.org'>\n" + "  <wsns0:Body>\n"[0m    
           74‚îÜ [1m[24m        + "    <wsns1:changePassword>\n" + "      <id     
  xsi:type='xsd:int'>101</id>\n"[0m                                             
           75‚îÜ [1m[24m        + "      <password xsi:type='xsd:string'>"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ [1m[24mprivate static String template2 = "</password>\n" + "     
  </wsns1:changePassword>\n" + "  </wsns0:Body>\n"[0m                           
           78‚îÜ [1m[24m        + "</wsns0:Envelope>"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          184‚îÜ [1m[24mprivate static String PASSWORD_TAG = "password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          207‚îÜ if ([1m[24mlocalName.equals(PASSWORD_TAG)[0m) password =         
  text.toString();                                                              
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.XXE_XMLREADER-1[0m                           
          XML External Entity (XXE) attacks can occur when an XML parser        
  supports XML entities while                                                   
          processing XML received from an untrusted source.                     
          Details: https://sg.run/GbAn                                          
                                                                                
          161‚îÜ [1m[24mreader.parse(new InputSource(new StringReader(xml)));[0m
                                                                               
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/WsSqlInjection.java [0m
       [1m[24mjava.lang.security.audit.formatted-sql-string.formatted-sql-string
  [0m                                                                           
          Detected a formatted string in a SQL statement. This could lead to SQL
  injection if                                                                  
          variables in the SQL statement are not properly sanitized. Use a      
  prepared statements                                                           
          (java.sql.PreparedStatement) instead. You can obtain a                
  PreparedStatement using                                                       
          'connection.prepareStatement'.                                        
          Details: https://sg.run/OPXp                                          
                                                                                
          233‚îÜ ResultSet results = [1m[24mstatement.executeQuery(query)[0m;
                                                                               
  [36m[22m[24m  src/main/java/org/owasp/webgoat/lessons/XPATHInjection.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           77‚îÜ [1m[24mprivate final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ [1m[24mprivate final static String PASSWORD = "Password"[0m;
                                                                                
  [36m[22m[24m                                                                  
  src/main/java/org/owasp/webgoat/lessons/instructor/SQLInjection/Login_i.java  
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-3[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/z561                                          
                                                                                
           48‚îÜ [1m[24mString query = "SELECT * FROM employee WHERE userid = ?   
  and password = ?"[0m;                                                         
                                                                       
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/Course.java [0m
       [1m[24mgitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1[0m                       
          A file is opened to read its content. The filename comes from an input
  parameter. If an                                                              
          unfiltered parameter is passed to this file API, files from an        
  arbitrary filesystem location                                                 
          could be read. This rule identifies potential path traversal          
  vulnerabilities. In many cases,                                               
          the constructed file path cannot be controlled by the user.           
          Details: https://sg.run/R5KK                                          
                                                                                
           83‚îÜ String fileName = new File([1m[24ms[0m).getName();
                                                                         
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/CreateDB.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-3[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/z561                                          
                                                                                
          190‚îÜ [1m[24mString createTableStatement = "CREATE TABLE               
  user_system_data (" + "userid varchar(5) not null primary key,"[0m            
          191‚îÜ [1m[24m          + "user_name varchar(12)," + "password          
  varchar(10)," + "cookie varchar(30)" + ")"[0m;                                
            ‚ãÆ‚îÜ----------------------------------------
          468‚îÜ [1m[24mString createTableStatement = "CREATE TABLE user_data_tan 
  (" + "userid int not null,"[0m                                                
          469‚îÜ [1m[24m          + "first_name varchar(20)," + "last_name        
  varchar(20)," + "cc_number varchar(30),"[0m                                   
          470‚îÜ [1m[24m          + "cc_type varchar(10)," + "cookie varchar(20),"
  + "login_count int," + "password varchar(20)"[0m                              
          471‚îÜ [1m[24m         
  + ")"[0m;                    
            ‚ãÆ‚îÜ----------------------------------------
          572‚îÜ [1m[24mString createTable = "CREATE TABLE employee ("[0m
          573‚îÜ [1m[24m          // + "userid INT GENERATED ALWAYS AS IDENTITY   
  PRIMARY KEY,"[0m                                                              
          574‚îÜ [1m[24m          + "userid INT NOT NULL PRIMARY KEY," +          
  "first_name VARCHAR(20)," + "last_name VARCHAR(20),"[0m                       
          575‚îÜ [1m[24m          + "ssn VARCHAR(12)," + "password VARCHAR(10)," +
  "title VARCHAR(20)," + "phone VARCHAR(13),"[0m                                
          576‚îÜ [1m[24m          + "address1 VARCHAR(80)," + "address2           
  VARCHAR(80)," + "manager INT," + "start_date CHAR(8),"[0m                     
          577‚îÜ [1m[24m          + "salary INT," + "ccn VARCHAR(30)," +          
  "ccn_limit INT," + "email VARCHAR(30)," // reason[0m                          
          578‚îÜ [1m[24m          // for the recent  
  write-up[0m                                      
          579‚îÜ [1m[24m          + "disciplined_date CHAR(8)," // date of write  
  up, NA otherwise[0m                                                           
          580‚îÜ [1m[24m          + "disciplined_notes VARCHAR(60)," // reason for
  the recent write-up[0m                                                        
          581‚îÜ [1m[24m          + "personal_description VARCHAR(60)" // We can  
  be rude here[0m                                                               
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/DatabaseUtilities.java  
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD
  3[0m                                                                          
          This code creates a database connect using a hardcoded, constant      
  password. Anyone with                                                         
          access to either the source code or the compiled code can easily learn
  the password.                                                                 
          Details: https://sg.run/qZAx                                          
                                                                                
          112‚îÜ [1m[24mreturn DriverManager.getConnection(url, "sa", "")[0m;
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2[
  0m                                                                            
          This code creates a database connect using a blank or empty password. 
  This indicates that                                                           
          the database is not protected by a password.                          
          Details: https://sg.run/lW3j                                          
                                                                                
          112‚îÜ [1m[24mreturn DriverManager.getConnection(url, "sa", "")[0m;
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_PASSWORD-1[0m                      
          Passwords should not be kept in the source code. The source code can  
  be widely shared in an                                                        
          enterprise environment, and is certainly shared in open source. To be 
  managed safely,                                                               
          passwords and secret keys should be stored in separate configuration  
  files or keystores.                                                           
          Details: https://sg.run/pNRN                                          
                                                                                
          100‚îÜ [1m[24mreturn DriverManager.getConnection(url, userPrefix + "_" +
  user, password)[0m;                                                           
                                                                           
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/ECSFactory.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           69‚îÜ [1m[24mpublic final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
           69‚îÜ [1m[24mpublic final static String PASSWORD = "Password"[0m;
            ‚ãÆ‚îÜ----------------------------------------
          183‚îÜ if ([1m[24mname.equals(PASSWORD)[0m)
                                                                              
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/LessonTracker.java [0m
       [1m[24mgitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1[0m                       
          A file is opened to read its content. The filename comes from an input
  parameter. If an                                                              
          unfiltered parameter is passed to this file API, files from an        
  arbitrary filesystem location                                                 
          could be read. This rule identifies potential path traversal          
  vulnerabilities. In many cases,                                               
          the constructed file path cannot be controlled by the user.           
          Details: https://sg.run/R5KK                                          
                                                                                
          203‚îÜ in = [1m[24mnew FileInputStream(fileName)[0m;
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.find_sec_bugs.PATH_TRAVERSAL_OUT-1.PATH_TRAVERSAL_OUT-1[0m 
          A file is opened to write to its contents. The filename comes from an 
  input parameter. If an                                                        
          unfiltered parameter is passed to this file API, files at an arbitrary
  filesystem location                                                           
          could be modified. This rule identifies potential path traversal      
  vulnerabilities. In many                                                      
          cases, the constructed file path cannot be controlled by the user.    
          Details: https://sg.run/ALZ4                                          
                                                                                
          350‚îÜ out = new FileOutputStream([1m[24mfileName[0m);
                                                                               
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/WebgoatContext.java [0m
       [1m[24mgitlab.find_sec_bugs.HARD_CODE_KEY-2[0m                           
          Cryptographic keys should not be kept in the source code. The source  
  code can be widely                                                            
          shared in an enterprise environment, and is certainly shared in open  
  source. To be managed                                                         
          safely, passwords and secret keys should be stored in separate        
  configuration files or                                                        
          keystores.                                                            
          Details: https://sg.run/obGN                                          
                                                                                
           17‚îÜ [1m[24mpublic final static String DATABASE_PASSWORD =            
  "DatabasePassword"[0m;                                                        
            ‚ãÆ‚îÜ----------------------------------------
           17‚îÜ [1m[24mpublic final static String DATABASE_PASSWORD =            
  "DatabasePassword"[0m;                                                        
                                                                                
  [36m[22m[24m  src/main/java/org/owasp/webgoat/session/WebgoatProperties.java  
  [0m                                                                           
       [1m[24mgitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1[0m                       
          A file is opened to read its content. The filename comes from an input
  parameter. If an                                                              
          unfiltered parameter is passed to this file API, files from an        
  arbitrary filesystem location                                                 
          could be read. This rule identifies potential path traversal          
  vulnerabilities. In many cases,                                               
          the constructed file path cannot be controlled by the user.           
          Details: https://sg.run/R5KK                                          
                                                                                
           53‚îÜ File propertiesFile = new File([1m[24mpropertiesFileName[0m);
            ‚ãÆ‚îÜ----------------------------------------
           57‚îÜ FileInputStream in = [1m[24mnew                                  
  FileInputStream(propertiesFile)[0m;                                           
                                                                         
  [36m[22m[24m  src/main/java/org/owasp/webgoat/util/Interceptor.java [0m
       [1m[24mgitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKE
  T-1[0m                                                                        
          Beyond using an SSL socket, you need to make sure your use of         
  SSLSocketFactory does all the                                                 
          appropriate certificate validation checks to make sure you are not    
  subject to man-in-the-                                                        
          middle attacks. Please read the OWASP Transport Layer Protection Cheat
  Sheet for details on                                                          
          how to do this correctly.                                             
          Details: https://sg.run/4k1Z                                          
                                                                                
           88‚îÜ osgSocket = [1m[24mnew Socket(osgServerName,                     
  Integer.parseInt(osgServerPort))[0m;                                          
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjava.lang.security.audit.crypto.unencrypted-socket.unencrypted-soc
  ket[0m                                                                        
          Detected use of a Java socket that is not encrypted. As a result, the 
  traffic could be read                                                         
          by an attacker intercepting the network traffic. Use an SSLSocket     
  created by                                                                    
          'SSLSocketFactory' or 'SSLServerSocketFactory' instead.               
          Details: https://sg.run/W8zA                                          
                                                                                
           88‚îÜ osgSocket = [1m[24mnew Socket(osgServerName,                     
  Integer.parseInt(osgServerPort))[0m;                                          
                                                           
  [36m[22m[24m  src/main/webapp/js/ace/worker-coffee.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-require[0m                       
          Detected the use of require(variable). Calling require with a         
  non-literal argument might                                                    
          allow an attacker to load an run arbitrary code, or access arbitrary  
  files.                                                                        
          Details: https://sg.run/5JJ6                                          
                                                                                
            1‚îÜ  ...                                                             
  [1m[24mon(e,t){postMessa[0mge({type:"call",id:t,data:e})},this.emit=functio   
  n(e,t){postMessage({type:"event",name:e,data:t})}}.call(i.prototype),new i};va
  t= ... [0m                                                                    
            2‚îÜ [1m[24m\f\r                                                      
  \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009
  \u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype.tri ... [0m  
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                        
  [36m[22m[24m  src/main/webapp/js/ace/worker-css.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-require[0m                       
          Detected the use of require(variable). Calling require with a         
  non-literal argument might                                                    
          allow an attacker to load an run arbitrary code, or access arbitrary  
  files.                                                                        
          Details: https://sg.run/5JJ6                                          
                                                                                
            1‚îÜ  ...                                                             
  [1m[24mon(e,t){postMessa[0mge({type:"call",id:t,data:e})},this.emit=functio   
  n(e,t){postMessage({type:"event",name:e,data:t})}}.call(i.prototype),new i};va
  t= ... [0m                                                                    
            2‚îÜ [1m[24m\f\r                                                      
  \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009
  \u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype.tri ... [0m  
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                         
  [36m[22m[24m  src/main/webapp/js/ace/worker-html.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-require[0m                       
          Detected the use of require(variable). Calling require with a         
  non-literal argument might                                                    
          allow an attacker to load an run arbitrary code, or access arbitrary  
  files.                                                                        
          Details: https://sg.run/5JJ6                                          
                                                                                
            1‚îÜ  ... [0m
            2‚îÜ [1m[24m[0m"||c==" "||c=="<"||c=="&")return                       
  e.unget(l),!1;if(n===c)return                                                 
  e.unget(l),!1;if(c=="#"){c=e.shift(1);if(c===i.EOF)return                     
  t._parseError("expected-nu ... [0m                                            
            3‚îÜ [1m[24m[0m\f                                                     
  \r&<>\"'=`]");o===r.EOF&&(t._parseError("eof-in-attribute-value-no-quotes"),t.
  _emitCurrentToken()),e.commit(),t._currentAttribute().nodeValue+=i ... [0m    
            4‚îÜ [1m[24m[0m\f\r                                                   
  \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009
  \u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype ... [0m      
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                         
  [36m[22m[24m  src/main/webapp/js/ace/worker-json.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-require[0m                       
          Detected the use of require(variable). Calling require with a         
  non-literal argument might                                                    
          allow an attacker to load an run arbitrary code, or access arbitrary  
  files.                                                                        
          Details: https://sg.run/5JJ6                                          
                                                                                
            1‚îÜ  ...                                                             
  [1m[24mon(e,t){postMessa[0mge({type:"call",id:t,data:e})},this.emit=functio   
  n(e,t){postMessage({type:"event",name:e,data:t})}}.call(i.prototype),new i};va
  t= ... [0m                                                                    
            2‚îÜ [1m[24m\f\r                                                      
  \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009
  \u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype.tri ... [0m  
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                        
  [36m[22m[24m  src/main/webapp/js/ace/worker-lua.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-require[0m                       
          Detected the use of require(variable). Calling require with a         
  non-literal argument might                                                    
          allow an attacker to load an run arbitrary code, or access arbitrary  
  files.                                                                        
          Details: https://sg.run/5JJ6                                          
                                                                                
            1‚îÜ                                                                  
  r=this._eventRegistry[e]=[]),r.indexOf(t)==-1&&r[n?"unshift":"push"](t),t},r.o
  ff=r.removeListener=r.removeEventListener=function(e,t){this._eventRegistry=th
  is._ ... [0m                                                                  
            2‚îÜ [1m[24m[0m";case"b":return C++,"\b";case"f":return               
  C++,"\f";case"z":return                                                       
  C++,H(),"";case"x":if(Z(t.charCodeAt(C+1))&&Z(t.charCodeAt(C+2)))return       
  C+=3,"\\"+ ... [0m                                                            
            3‚îÜ [1m[24m[0m\f\r                                                   
  \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009
  \u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype ... [0m      
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                        
  [36m[22m[24m  src/main/webapp/js/ace/worker-php.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-require[0m                       
          Detected the use of require(variable). Calling require with a         
  non-literal argument might                                                    
          allow an attacker to load an run arbitrary code, or access arbitrary  
  files.                                                                        
          Details: https://sg.run/5JJ6                                          
                                                                                
            1‚îÜ  ... [0m
            2‚îÜ [1m[24m[0m",e:""};return                                         
  e.replace(/~\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3})~/g,function(e)
  {var t=e[1];return n[t]!==undefined?n[t]:"x"===t[0]|| ... [0m                 
            3‚îÜ [1m[24m[0m\f\r                                                   
  \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009
  \u200a\u202f\u205f\u3000\u2028\u2029\ufeff";if(!String.prototype ... [0m      
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
                                                         
  [36m[22m[24m  src/main/webapp/js/angular/angular.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-fs-filename[0m                   
          A variable is present in the filename argument of fs calls, this might
  allow an attacker to                                                          
          access anything on your system.                                       
          Details: https://sg.run/L09Y                                          
                                                                                
         8321‚îÜ [1m[24mxhr.open(method, url, true)[0m;
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mgitlab.eslint.detect-possible-timing-attacks[0m                   
          String comparisons using '===', '!==', '!=' and '==' is vulnerable to 
  timing attacks. More                                                          
          info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/             
          Details: https://sg.run/GwwB                                          
                                                                                
         3982‚îÜ else [1m[24mif (hash === 'top') $window.scrollTo(0, 0);[0m
            ‚ãÆ‚îÜ----------------------------------------
         7056‚îÜ [1m[24mif(token == tokens2[j]) continue outer;[0m
            ‚ãÆ‚îÜ----------------------------------------
        18006‚îÜ [1m[24mif(token == tokens2[j]) continue outer;[0m
                                                    
  [36m[22m[24m  src/main/webapp/lessonJS/eval.js [0m
       [1m[24mgitlab.eslint.detect-non-literal-fs-filename[0m                   
          A variable is present in the filename argument of fs calls, this might
  allow an attacker to                                                          
          access anything on your system.                                       
          Details: https://sg.run/L09Y                                          
                                                                                
           26‚îÜ [1m[24mhttp_request.open(method, url, true)[0m;
                                                                                
  [36m[22m[24m                                                                  
  src/main/webapp/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js [0m         
       [1m[24mgitlab.eslint.detect-non-literal-fs-filename[0m                   
          A variable is present in the filename argument of fs calls, this might
  allow an attacker to                                                          
          access anything on your system.                                       
          Details: https://sg.run/L09Y                                          
                                                                                
         2541‚îÜ [1m[24miframeDoc.open()[0m;
