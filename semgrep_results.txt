
Findings:

  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/AbstractLesson.java 
     contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url
        A parameter being passed directly into java.net.URL function most likely lead to SSRF.
        Details: https://sg.run/ndOd

        694┆ public static Element readFromURL(String url) {
        695┆     ElementContainer ec = new ElementContainer();
        696┆ 
        697┆     try {
        698┆         URL u = new URL(url);
        699┆         HttpURLConnection huc = (HttpURLConnection) u.openConnection();
        700┆         BufferedReader reader = new BufferedReader(new InputStreamReader(huc.getInputStream()));
        701┆         String line;
        702┆ 
        703┆         while ((line = reader.readLine()) != null) {
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        623┆ ResultSet answer_results = answer_statement.executeQuery(query);


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/Encoding.java 
     java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
        Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor
        could discern the difference between plaintext with valid or invalid padding. Further, CBC
        mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.
        Details: https://sg.run/ydxr

         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        325┆ Cipher passwordDecryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        370┆ Cipher passwordEncryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
     java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
        DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See
        https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-
        standard for more information.
        Details: https://sg.run/5Q73

         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        325┆ Cipher passwordDecryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        370┆ Cipher passwordEncryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
     java.lang.security.audit.crypto.use-of-md5.use-of-md5
        Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and
        is therefore not suitable as a cryptographic signature. Use HMAC instead.
        Details: https://sg.run/ryJn

        465┆ md = MessageDigest.getInstance("MD5");


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        198┆ ResultSet answer_results = answer_statement.executeQuery(query);
          ⋮┆----------------------------------------
        252┆ ResultSet answer_results = answer_statement.executeQuery(query);


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/GoatHillsFinancial/Login.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        127┆ ResultSet answer_results = answer_statement.executeQuery(query);


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/SQLInjection/Login.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        131┆ ResultSet answer_results = answer_statement.executeQuery(query);
          ⋮┆----------------------------------------
        166┆ ResultSet answer_results = answer_statement.executeQuery(query);


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        108┆ ResultSet answer_results = answer_statement.executeQuery(query);
          ⋮┆----------------------------------------
        157┆ ResultSet answer_results = answer_statement.executeQuery(query);


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/WsSAXInjection.java 
     contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader
        XMLReader being instantiated without calling the setFeature functions that are generally
        used for disabling entity processing
        Details: https://sg.run/J9rR

        158┆ XMLReader reader = XMLReaderFactory.createXMLReader();
          ⋮┆----------------------------------------
        158┆ XMLReader reader = XMLReaderFactory.createXMLReader();
        159┆ PasswordChanger changer = new PasswordChanger();
        160┆ reader.setContentHandler(changer);
        161┆ reader.parse(new InputSource(new StringReader(xml)));


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/WsSqlInjection.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        233┆ ResultSet results = statement.executeQuery(query);


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/session/UserDatabase.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

         71┆ ResultSet countResult = statement.executeQuery(QUERY_TABLE_COUNT.replace("table", tableName));


  .extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/util/Interceptor.java 
     java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
        Detected use of a Java socket that is not encrypted. As a result, the traffic could be read
        by an attacker intercepting the network traffic. Use an SSLSocket created by
        'SSLSocketFactory' or 'SSLServerSocketFactory' instead.
        Details: https://sg.run/W8zA

         88┆ osgSocket = new Socket(osgServerName, Integer.parseInt(osgServerPort));


  src/main/java/org/owasp/webgoat/lessons/AbstractLesson.java 
     contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url
        A parameter being passed directly into java.net.URL function most likely lead to SSRF.
        Details: https://sg.run/ndOd

        694┆ public static Element readFromURL(String url) {
        695┆     ElementContainer ec = new ElementContainer();
        696┆ 
        697┆     try {
        698┆         URL u = new URL(url);
        699┆         HttpURLConnection huc = (HttpURLConnection) u.openConnection();
        700┆         BufferedReader reader = new BufferedReader(new InputStreamReader(huc.getInputStream()));
        701┆         String line;
        702┆ 
        703┆         while ((line = reader.readLine()) != null) {
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        623┆ ResultSet answer_results = answer_statement.executeQuery(query);


  src/main/java/org/owasp/webgoat/lessons/Encoding.java 
     java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
        Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor
        could discern the difference between plaintext with valid or invalid padding. Further, CBC
        mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.
        Details: https://sg.run/ydxr

         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        325┆ Cipher passwordDecryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        370┆ Cipher passwordEncryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
     java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
        DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See
        https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-
        standard for more information.
        Details: https://sg.run/5Q73

         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        325┆ Cipher passwordDecryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
         ▶▶┆ Autofix ▶ "AES/GCM/NoPadding"
        370┆ Cipher passwordEncryptCipher = Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");
          ⋮┆----------------------------------------
     java.lang.security.audit.crypto.use-of-md5.use-of-md5
        Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and
        is therefore not suitable as a cryptographic signature. Use HMAC instead.
        Details: https://sg.run/ryJn

        465┆ md = MessageDigest.getInstance("MD5");


  src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        198┆ ResultSet answer_results = answer_statement.executeQuery(query);
          ⋮┆----------------------------------------
        252┆ ResultSet answer_results = answer_statement.executeQuery(query);


  src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/Login.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        127┆ ResultSet answer_results = answer_statement.executeQuery(query);


  src/main/java/org/owasp/webgoat/lessons/SQLInjection/Login.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        131┆ ResultSet answer_results = answer_statement.executeQuery(query);
          ⋮┆----------------------------------------
        166┆ ResultSet answer_results = answer_statement.executeQuery(query);


  src/main/java/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        108┆ ResultSet answer_results = answer_statement.executeQuery(query);
          ⋮┆----------------------------------------
        157┆ ResultSet answer_results = answer_statement.executeQuery(query);


  src/main/java/org/owasp/webgoat/lessons/WsSAXInjection.java 
     contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader
        XMLReader being instantiated without calling the setFeature functions that are generally
        used for disabling entity processing
        Details: https://sg.run/J9rR

        158┆ XMLReader reader = XMLReaderFactory.createXMLReader();
          ⋮┆----------------------------------------
        158┆ XMLReader reader = XMLReaderFactory.createXMLReader();
        159┆ PasswordChanger changer = new PasswordChanger();
        160┆ reader.setContentHandler(changer);
        161┆ reader.parse(new InputSource(new StringReader(xml)));


  src/main/java/org/owasp/webgoat/lessons/WsSqlInjection.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

        233┆ ResultSet results = statement.executeQuery(query);


  src/main/java/org/owasp/webgoat/session/UserDatabase.java 
     java.lang.security.audit.formatted-sql-string.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.
        Details: https://sg.run/OPXp

         71┆ ResultSet countResult = statement.executeQuery(QUERY_TABLE_COUNT.replace("table", tableName));


  src/main/java/org/owasp/webgoat/util/Interceptor.java 
     java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
        Detected use of a Java socket that is not encrypted. As a result, the traffic could be read
        by an attacker intercepting the network traffic. Use an SSLSocket created by
        'SSLSocketFactory' or 'SSLServerSocketFactory' instead.
        Details: https://sg.run/W8zA

         88┆ osgSocket = new Socket(osgServerName, Integer.parseInt(osgServerPort));

============================[ summary ]============================
Total time: 834.4319s Config time: 4.9859s Core time: 829.0073s

Semgrep-core time:
Total CPU time: 46.6334s  File parse time: 67.6924s  Rule parse time: 0.2061s  Match time: 9.5522s
Slowest 5/386 files
...che/jsp/WEB_002dINF/pages/main_005fnew_jsp.java ( 30KB): 1.654s (0.910s to parse)
...org/apache/jsp/WEB_002dINF/pages/login_jsp.java ( 14KB): 0.604s (0.748s to parse)
...ses/org/owasp/webgoat/lessons/ReflectedXSS.java ( 10KB): 0.015s (0.696s to parse)
...org/apache/jsp/WEB_002dINF/pages/about_jsp.java ( 10KB): 0.474s (0.547s to parse)
.../org/owasp/webgoat/lessons/ConcurrencyCart.java ( 22KB): 0.322s (0.536s to parse)
Slowest 5 rules to match
...ity.injection.tainted-url-host.tainted-url-host:         0.043s
...n.tainted-system-command.tainted-system-command:         0.015s
...injection.tainted-sql-string.tainted-sql-string:         0.046s
...jection.tainted-html-string.tainted-html-string:         0.042s
...y.injection.tainted-file-path.tainted-file-path:         0.008s

Analyzed: 386 java files (  2MB in 46.427 seconds)
Errors:   0 files with errors
