{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "results": [{"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 325, "snippet": {"text": "            Cipher passwordDecryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 325}}}], "message": {"text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."}, "ruleId": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 370, "snippet": {"text": "            Cipher passwordEncryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 370}}}], "message": {"text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."}, "ruleId": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 325, "snippet": {"text": "            Cipher passwordDecryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 325}}}], "message": {"text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."}, "ruleId": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 370, "snippet": {"text": "            Cipher passwordEncryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 370}}}], "message": {"text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."}, "ruleId": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/AbstractLesson.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 623, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 623}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 198, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 198}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 252, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 252}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/GoatHillsFinancial/Login.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 127, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 127}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/SQLInjection/Login.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 131, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 131}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/SQLInjection/Login.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 166, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 166}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 108, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 108}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 157, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 157}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/WsSqlInjection.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 66, "endLine": 233, "snippet": {"text": "                ResultSet results = statement.executeQuery(query);"}, "startColumn": 37, "startLine": 233}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/session/UserDatabase.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 97, "endLine": 71, "snippet": {"text": "\t\t\tResultSet countResult = statement.executeQuery(QUERY_TABLE_COUNT.replace(\"table\", tableName));"}, "startColumn": 28, "startLine": 71}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/AbstractLesson.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 623, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 623}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 198, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 198}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/DefaultLessonAction.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 252, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 252}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/GoatHillsFinancial/Login.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 127, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 127}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/SQLInjection/Login.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 131, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 131}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/SQLInjection/Login.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 166, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 166}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 108, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 108}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 80, "endLine": 157, "snippet": {"text": "                ResultSet answer_results = answer_statement.executeQuery(query);"}, "startColumn": 44, "startLine": 157}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/WsSqlInjection.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 66, "endLine": 233, "snippet": {"text": "                ResultSet results = statement.executeQuery(query);"}, "startColumn": 37, "startLine": 233}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/session/UserDatabase.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 97, "endLine": 71, "snippet": {"text": "\t\t\tResultSet countResult = statement.executeQuery(QUERY_TABLE_COUNT.replace(\"table\", tableName));"}, "startColumn": 28, "startLine": 71}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/util/Interceptor.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 75, "endLine": 88, "snippet": {"text": "\t\t\t\tosgSocket = new Socket(osgServerName, Integer.parseInt(osgServerPort));"}, "startColumn": 17, "startLine": 88}}}], "message": {"text": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."}, "ruleId": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/util/Interceptor.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 75, "endLine": 88, "snippet": {"text": "\t\t\t\tosgSocket = new Socket(osgServerName, Integer.parseInt(osgServerPort));"}, "startColumn": 17, "startLine": 88}}}], "message": {"text": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."}, "ruleId": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 51, "endLine": 465, "snippet": {"text": "            md = MessageDigest.getInstance(\"MD5\");"}, "startColumn": 13, "startLine": 465}}}], "message": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."}, "ruleId": "java.lang.security.audit.crypto.use-of-md5.use-of-md5"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 51, "endLine": 465, "snippet": {"text": "            md = MessageDigest.getInstance(\"MD5\");"}, "startColumn": 13, "startLine": 465}}}], "message": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."}, "ruleId": "java.lang.security.audit.crypto.use-of-md5.use-of-md5"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 325, "snippet": {"text": "            Cipher passwordDecryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 325}}}], "message": {"text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."}, "ruleId": "java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 370, "snippet": {"text": "            Cipher passwordEncryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 370}}}], "message": {"text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."}, "ruleId": "java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 325, "snippet": {"text": "            Cipher passwordDecryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 325}}}], "message": {"text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."}, "ruleId": "java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/Encoding.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 98, "endLine": 370, "snippet": {"text": "            Cipher passwordEncryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");"}, "startColumn": 63, "startLine": 370}}}], "message": {"text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."}, "ruleId": "java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/AbstractLesson.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 6, "endLine": 714, "snippet": {"text": "    public static Element readFromURL(String url) {\n        ElementContainer ec = new ElementContainer();\n\n        try {\n            URL u = new URL(url);\n            HttpURLConnection huc = (HttpURLConnection) u.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(huc.getInputStream()));\n            String line;\n\n            while ((line = reader.readLine()) != null) {\n                ec.addElement(new StringElement(line));\n            }\n\n            reader.close();\n        } catch (Exception e) {\n            System.out.println(e);\n            e.printStackTrace();\n        }\n\n        return (ec);\n    }"}, "startColumn": 5, "startLine": 694}}}], "message": {"text": "A parameter being passed directly into java.net.URL function most likely lead to SSRF."}, "ruleId": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/AbstractLesson.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 6, "endLine": 714, "snippet": {"text": "    public static Element readFromURL(String url) {\n        ElementContainer ec = new ElementContainer();\n\n        try {\n            URL u = new URL(url);\n            HttpURLConnection huc = (HttpURLConnection) u.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(huc.getInputStream()));\n            String line;\n\n            while ((line = reader.readLine()) != null) {\n                ec.addElement(new StringElement(line));\n            }\n\n            reader.close();\n        } catch (Exception e) {\n            System.out.println(e);\n            e.printStackTrace();\n        }\n\n        return (ec);\n    }"}, "startColumn": 5, "startLine": 694}}}], "message": {"text": "A parameter being passed directly into java.net.URL function most likely lead to SSRF."}, "ruleId": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/WsSAXInjection.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 66, "endLine": 158, "snippet": {"text": "            XMLReader reader = XMLReaderFactory.createXMLReader();"}, "startColumn": 13, "startLine": 158}}}], "message": {"text": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "ruleId": "contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": ".extract/webapps/WebGoat/WEB-INF/classes/org/owasp/webgoat/lessons/WsSAXInjection.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 66, "endLine": 161, "snippet": {"text": "            XMLReader reader = XMLReaderFactory.createXMLReader();\n            PasswordChanger changer = new PasswordChanger();\n            reader.setContentHandler(changer);\n            reader.parse(new InputSource(new StringReader(xml)));"}, "startColumn": 13, "startLine": 158}}}], "message": {"text": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "ruleId": "contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/WsSAXInjection.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 66, "endLine": 158, "snippet": {"text": "            XMLReader reader = XMLReaderFactory.createXMLReader();"}, "startColumn": 13, "startLine": 158}}}], "message": {"text": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "ruleId": "contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/main/java/org/owasp/webgoat/lessons/WsSAXInjection.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 66, "endLine": 161, "snippet": {"text": "            XMLReader reader = XMLReaderFactory.createXMLReader();\n            PasswordChanger changer = new PasswordChanger();\n            reader.setContentHandler(changer);\n            reader.parse(new InputSource(new StringReader(xml)));"}, "startColumn": 13, "startLine": 158}}}], "message": {"text": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "ruleId": "contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader"}], "tool": {"driver": {"name": "semgrep", "rules": [{"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "HockeyApp detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-hockeyapp.detected-hockeyapp", "id": "generic.secrets.security.detected-hockeyapp.detected-hockeyapp", "name": "generic.secrets.security.detected-hockeyapp.detected-hockeyapp", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "HockeyApp detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Picatic API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key", "id": "generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key", "name": "generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Picatic API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Google API Key Detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-google-api-key.detected-google-api-key", "id": "generic.secrets.security.detected-google-api-key.detected-google-api-key", "name": "generic.secrets.security.detected-google-api-key.detected-google-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Google API Key Detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Multiple ENTRYPOINT instructions were found. Only the last one will take effect."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.correctness.multiple-entrypoint-instructions.multiple-entrypoint-instructions", "id": "generic.dockerfile.correctness.multiple-entrypoint-instructions.multiple-entrypoint-instructions", "name": "generic.dockerfile.correctness.multiple-entrypoint-instructions.multiple-entrypoint-instructions", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Multiple ENTRYPOINT instructions were found. Only the last one will take effect."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Google OAuth url detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-google-oauth.detected-google-oauth-url", "id": "generic.secrets.security.detected-google-oauth.detected-google-oauth-url", "name": "generic.secrets.security.detected-google-oauth.detected-google-oauth-url", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Google OAuth url detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5", "id": "java.lang.security.audit.crypto.use-of-md5.use-of-md5", "name": "java.lang.security.audit.crypto.use-of-md5.use-of-md5", "properties": {"precision": "very-high", "tags": ["CWE-328: Use of Weak Hash", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Heroku API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key", "id": "generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key", "name": "generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Heroku API Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request", "id": "java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request", "name": "java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request", "properties": {"precision": "very-high", "tags": ["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "AWS AppSync GraphQL Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key", "id": "generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key", "name": "generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "AWS AppSync GraphQL Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated", "id": "java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated", "name": "java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."}, "helpUri": "https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe", "id": "java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe", "name": "java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2017 - XML External Entities (XXE)", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This 'apt-get install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.correctness.missing-assume-yes-switch.missing-assume-yes-switch", "id": "generic.dockerfile.correctness.missing-assume-yes-switch.missing-assume-yes-switch", "name": "generic.dockerfile.correctness.missing-assume-yes-switch.missing-assume-yes-switch", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This 'apt-get install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.md5-used-as-password.md5-used-as-password", "id": "java.lang.security.audit.md5-used-as-password.md5-used-as-password", "name": "java.lang.security.audit.md5-used-as-password.md5-used-as-password", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Multiple CMD instructions were found. Only the last one will take effect."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.correctness.multiple-cmd-instructions.multiple-cmd-instructions", "id": "generic.dockerfile.correctness.multiple-cmd-instructions.multiple-cmd-instructions", "name": "generic.dockerfile.correctness.multiple-cmd-instructions.multiple-cmd-instructions", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Multiple CMD instructions were found. Only the last one will take effect."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."}, "helpUri": "https://semgrep.dev/r/java.spring.security.injection.tainted-system-command.tainted-system-command", "id": "java.spring.security.injection.tainted-system-command.tainted-system-command", "name": "java.spring.security.injection.tainted-system-command.tainted-system-command", "properties": {"precision": "very-high", "tags": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The 'baseURL' is invalid. This may cause links to not work if deployed. Include the scheme (e.g., http:// or https://)."}, "helpUri": "https://semgrep.dev/r/generic.hugo.best-practice.invalid-base-url.invalid-base-url", "id": "generic.hugo.best-practice.invalid-base-url.invalid-base-url", "name": "generic.hugo.best-practice.invalid-base-url.invalid-base-url", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "The 'baseURL' is invalid. This may cause links to not work if deployed. Include the scheme (e.g., http:// or https://)."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Mailgun API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key", "id": "generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key", "name": "generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Mailgun API Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-yum-clean-all.missing-yum-clean-all", "id": "generic.dockerfile.best-practice.missing-yum-clean-all.missing-yum-clean-all", "name": "generic.dockerfile.best-practice.missing-yum-clean-all.missing-yum-clean-all", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a relative WORKDIR. Use absolute paths. This prevents issues based on assumptions about the WORKDIR of previous containers."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.use-absolute-workdir.use-absolute-workdir", "id": "generic.dockerfile.best-practice.use-absolute-workdir.use-absolute-workdir", "name": "generic.dockerfile.best-practice.use-absolute-workdir.use-absolute-workdir", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Detected a relative WORKDIR. Use absolute paths. This prevents issues based on assumptions about the WORKDIR of previous containers."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "A parameter being passed directly into CloseableHttpClient functions most likely lead to SSRF."}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.http.impl.client.CloseableHttpClient", "id": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.http.impl.client.CloseableHttpClient", "name": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.http.impl.client.CloseableHttpClient", "properties": {"precision": "very-high", "tags": ["CWE-918: Server-Side Request Forgery (SSRF)"]}, "shortDescription": {"text": "A parameter being passed directly into CloseableHttpClient functions most likely lead to SSRF."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "GitHub Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-github-token.detected-github-token", "id": "generic.secrets.security.detected-github-token.detected-github-token", "name": "generic.secrets.security.detected-github-token.detected-github-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "GitHub Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected an invalid port number. Valid ports are 0 through 65535."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.correctness.invalid-port.invalid-port", "id": "generic.dockerfile.correctness.invalid-port.invalid-port", "name": "generic.dockerfile.correctness.invalid-port.invalid-port", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Detected an invalid port number. Valid ports are 0 through 65535."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "A parameter being passed directly into HttpClient functions most likely lead to SSRF."}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.commons.httpclient", "id": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.commons.httpclient", "name": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.commons.httpclient", "properties": {"precision": "very-high", "tags": ["CWE-918: Server-Side Request Forgery (SSRF)"]}, "shortDescription": {"text": "A parameter being passed directly into HttpClient functions most likely lead to SSRF."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file."}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "id": "generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "name": "generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Packages in base containers should be up-to-date, removing the need to upgrade or dist-upgrade. If a package is out of date, contact the maintainers."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.avoid-apt-get-upgrade.avoid-apt-get-upgrade", "id": "generic.dockerfile.best-practice.avoid-apt-get-upgrade.avoid-apt-get-upgrade", "name": "generic.dockerfile.best-practice.avoid-apt-get-upgrade.avoid-apt-get-upgrade", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Packages in base containers should be up-to-date, removing the need to upgrade or dist-upgrade. If a package is out of date, contact the maintainers."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "By not specifying a USER, a programs in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.security.missing-user.missing-user", "id": "generic.dockerfile.security.missing-user.missing-user", "name": "generic.dockerfile.security.missing-user.missing-user", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "By not specifying a USER, a programs in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.security.last-user-is-root.last-user-is-root", "id": "generic.dockerfile.security.last-user-is-root.last-user-is-root", "name": "generic.dockerfile.security.last-user-is-root.last-user-is-root", "properties": {"precision": "very-high", "tags": ["CWE-269: Improper Privilege Management", "OWASP-A04:2021 - Insecure Design"]}, "shortDescription": {"text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Twitter OAuth detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth", "id": "generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth", "name": "generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Twitter OAuth detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."}, "helpUri": "https://semgrep.dev/r/java.aws-lambda.security.tainted-sqli.tainted-sqli", "id": "java.aws-lambda.security.tainted-sqli.tainted-sqli", "name": "java.aws-lambda.security.tainted-sqli.tainted-sqli", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Sauce Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-sauce-token.detected-sauce-token", "id": "generic.secrets.security.detected-sauce-token.detected-sauce-token", "name": "generic.secrets.security.detected-sauce-token.detected-sauce-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Sauce Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SendGrid API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key", "id": "generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key", "name": "generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "SendGrid API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Stripe Restricted API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key", "id": "generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key", "name": "generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Stripe Restricted API Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The package lists were not deleted after running 'apt-get update', which increases the size of the image. Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the end of apt-get command chain."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.remove-package-lists.remove-package-lists", "id": "generic.dockerfile.best-practice.remove-package-lists.remove-package-lists", "name": "generic.dockerfile.best-practice.remove-package-lists.remove-package-lists", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "The package lists were not deleted after running 'apt-get update', which increases the size of the image. Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the end of apt-get command chain."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Twilio API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key", "id": "generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key", "name": "generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Twilio API Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."}, "helpUri": "https://semgrep.dev/r/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify", "id": "java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify", "name": "java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify", "properties": {"precision": "very-high", "tags": ["CWE-345: Insufficient Verification of Data Authenticity", "OWASP-A08:2021 - Software and Data Integrity Failures"]}, "shortDescription": {"text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allowlist for validation."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.request-host-used.request-host-used", "id": "generic.nginx.security.request-host-used.request-host-used", "name": "generic.nginx.security.request-host-used.request-host-used", "properties": {"precision": "very-high", "tags": ["CWE-290: Authentication Bypass by Spoofing", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allowlist for validation."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SoftLayer API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key", "id": "generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key", "name": "generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "SoftLayer API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SAXParserFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.saxparserfactory.owasp.java.xxe.javax.xml.parsers.SAXParserFactory", "id": "contrib.owasp.java.xxe.saxparserfactory.owasp.java.xxe.javax.xml.parsers.SAXParserFactory", "name": "contrib.owasp.java.xxe.saxparserfactory.owasp.java.xxe.javax.xml.parsers.SAXParserFactory", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2017 - XML External Entities (XXE)"]}, "shortDescription": {"text": "SAXParserFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SSH Password detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-ssh-password.detected-ssh-password", "id": "generic.secrets.security.detected-ssh-password.detected-ssh-password", "name": "generic.secrets.security.detected-ssh-password.detected-ssh-password", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "SSH Password detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."}, "helpUri": "https://semgrep.dev/r/java.aws-lambda.security.tainted-sql-string.tainted-sql-string", "id": "java.aws-lambda.security.tainted-sql-string.tainted-sql-string", "name": "java.aws-lambda.security.tainted-sql-string.tainted-sql-string", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version", "id": "generic.nginx.security.missing-ssl-version.missing-ssl-version", "name": "generic.nginx.security.missing-ssl-version.missing-ssl-version", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition", "id": "generic.nginx.security.header-redefinition.header-redefinition", "name": "generic.nginx.security.header-redefinition.header-redefinition", "properties": {"precision": "very-high", "tags": ["CWE-16: CWE CATEGORY: Configuration", "OWASP-A06:2017 - Security Misconfiguration", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."}, "helpUri": "https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href", "id": "generic.html-templates.security.var-in-href.var-in-href", "name": "generic.html-templates.security.var-in-href.var-in-href", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect", "id": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect", "name": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect", "properties": {"precision": "very-high", "tags": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Square Access Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-square-access-token.detected-square-access-token", "id": "generic.secrets.security.detected-square-access-token.detected-square-access-token", "name": "generic.secrets.security.detected-square-access-token.detected-square-access-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Square Access Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."}, "helpUri": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path", "id": "java.spring.security.injection.tainted-file-path.tainted-file-path", "name": "java.spring.security.injection.tainted-file-path.tainted-file-path", "properties": {"precision": "very-high", "tags": ["CWE-23: Relative Path Traversal", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "DocumentBuilderFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.documentbuilderfactory.owasp.java.xxe.javax.xml.parsers.DocumentBuilderFactory", "id": "contrib.owasp.java.xxe.documentbuilderfactory.owasp.java.xxe.javax.xml.parsers.DocumentBuilderFactory", "name": "contrib.owasp.java.xxe.documentbuilderfactory.owasp.java.xxe.javax.xml.parsers.DocumentBuilderFactory", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A4: XML External Entities (XXE)"]}, "shortDescription": {"text": "DocumentBuilderFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SAXBuilder being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.saxbuilder.owasp.java.xxe.org.jdom2.input.SAXBuilder", "id": "contrib.owasp.java.xxe.saxbuilder.owasp.java.xxe.org.jdom2.input.SAXBuilder", "name": "contrib.owasp.java.xxe.saxbuilder.owasp.java.xxe.org.jdom2.input.SAXBuilder", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A4: XML External Entities (XXE)"]}, "shortDescription": {"text": "SAXBuilder being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host", "id": "generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host", "name": "generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host", "properties": {"precision": "very-high", "tags": ["CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "helpUri": "https://semgrep.dev/r/java.spring.security.audit.spring-sqli.spring-sqli", "id": "java.spring.security.audit.spring-sqli.spring-sqli", "name": "java.spring.security.audit.spring-sqli.spring-sqli", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection", "id": "java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection", "name": "java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection", "properties": {"precision": "very-high", "tags": ["CWE-297: Improper Validation of Certificate with Host Mismatch", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Square OAuth Secret detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret", "id": "generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret", "name": "generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Square OAuth Secret detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "GCM IV/nonce is reused: encryption can be totally useless"}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse", "id": "java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse", "name": "java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse", "properties": {"precision": "very-high", "tags": ["CWE-323: Reusing a Nonce, Key Pair in Encryption", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "GCM IV/nonce is reused: encryption can be totally useless"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Facebook OAuth detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth", "id": "generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth", "name": "generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Facebook OAuth detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."}, "helpUri": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-src.var-in-script-src", "id": "generic.html-templates.security.var-in-script-src.var-in-script-src", "name": "generic.html-templates.security.var-in-script-src.var-in-script-src", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false", "id": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false", "name": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2017 - XML External Entities (XXE)", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."}, "helpUri": "https://semgrep.dev/r/generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var", "id": "generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var", "name": "generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command.  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request", "id": "java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request", "name": "java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request", "properties": {"precision": "very-high", "tags": ["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command.  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."}, "helpUri": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag", "id": "generic.html-templates.security.var-in-script-tag.var-in-script-tag", "name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Google Cloud API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-google-cloud-api-key.detected-google-cloud-api-key", "id": "generic.secrets.security.detected-google-cloud-api-key.detected-google-cloud-api-key", "name": "generic.secrets.security.detected-google-cloud-api-key.detected-google-cloud-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Google Cloud API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."}, "helpUri": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "name": "java.spring.security.injection.tainted-html-string.tainted-html-string", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size", "id": "java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size", "name": "java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "linux shadow file detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-etc-shadow.detected-etc-shadow", "id": "generic.secrets.security.detected-etc-shadow.detected-etc-shadow", "name": "generic.secrets.security.detected-etc-shadow.detected-etc-shadow", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "linux shadow file detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher", "id": "java.lang.security.audit.crypto.ecb-cipher.ecb-cipher", "name": "java.lang.security.audit.crypto.ecb-cipher.ecb-cipher", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader", "id": "contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader", "name": "contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A4: XML External Entities (XXE)"]}, "shortDescription": {"text": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit."}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block", "id": "generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block", "name": "generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "External entities are allowed for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true", "id": "java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true", "name": "java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2017 - XML External Entities (XXE)", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "External entities are allowed for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Facebook Access Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token", "id": "generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token", "name": "generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Facebook Access Token detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch", "id": "generic.dockerfile.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch", "name": "generic.dockerfile.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request", "id": "java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request", "name": "java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Slack Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-slack-token.detected-slack-token", "id": "generic.secrets.security.detected-slack-token.detected-slack-token", "name": "generic.secrets.security.detected-slack-token.detected-slack-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Slack Token detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-dnf-clean-all.missing-dnf-clean-all", "id": "generic.dockerfile.best-practice.missing-dnf-clean-all.missing-dnf-clean-all", "name": "generic.dockerfile.best-practice.missing-dnf-clean-all.missing-dnf-clean-all", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "bcrypt hash detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash", "id": "generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash", "name": "generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "bcrypt hash detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing", "id": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing", "name": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2017 - XML External Entities (XXE)", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1", "id": "java.lang.security.audit.crypto.use-of-sha1.use-of-sha1", "name": "java.lang.security.audit.crypto.use-of-sha1.use-of-sha1", "properties": {"precision": "very-high", "tags": ["CWE-328: Use of Weak Hash", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "JWT token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "id": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "name": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "properties": {"precision": "very-high", "tags": ["CWE-321: Use of Hard-coded Cryptographic Key", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "JWT token detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.remove-package-cache.remove-package-cache", "id": "generic.dockerfile.best-practice.remove-package-cache.remove-package-cache", "name": "generic.dockerfile.best-practice.remove-package-cache.remove-package-cache", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Some commands such as `$CMD` do not make sense in a container. Do not use these."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.nonsensical-command.nonsensical-command", "id": "generic.dockerfile.best-practice.nonsensical-command.nonsensical-command", "name": "generic.dockerfile.best-practice.nonsensical-command.nonsensical-command", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Some commands such as `$CMD` do not make sense in a container. Do not use these."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Image aliases must have a unique name, and '$REF' is used twice. Use another name for '$REF'."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.correctness.alias-must-be-unique.alias-must-be-unique", "id": "generic.dockerfile.correctness.alias-must-be-unique.alias-must-be-unique", "name": "generic.dockerfile.correctness.alias-must-be-unique.alias-must-be-unique", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Image aliases must have a unique name, and '$REF' is used twice. Use another name for '$REF'."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Username and password in URI detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri", "id": "generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri", "name": "generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Username and password in URI detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Slack Webhook detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-slack-webhook.detected-slack-webhook", "id": "generic.secrets.security.detected-slack-webhook.detected-slack-webhook", "name": "generic.secrets.security.detected-slack-webhook.detected-slack-webhook", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Slack Webhook detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Images should be tagged with an explicit version to produce deterministic container images. The 'latest' tag may change the base container without warning."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.avoid-latest-version.avoid-latest-version", "id": "generic.dockerfile.best-practice.avoid-latest-version.avoid-latest-version", "name": "generic.dockerfile.best-practice.avoid-latest-version.avoid-latest-version", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Images should be tagged with an explicit version to produce deterministic container images. The 'latest' tag may change the base container without warning."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command.  This could lead to command injection if variables passed into the exec commands are not properly sanitized.  Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request", "id": "java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request", "name": "java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request", "properties": {"precision": "very-high", "tags": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command.  This could lead to command injection if variables passed into the exec commands are not properly sanitized.  Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters."}, "helpUri": "https://semgrep.dev/r/generic.unicode.security.bidi.contains-bidirectional-characters", "id": "generic.unicode.security.bidi.contains-bidirectional-characters", "name": "generic.unicode.security.bidi.contains-bidirectional-characters", "properties": {"precision": "very-high", "tags": ["CWE-94: Improper Control of Generation of Code ('Code Injection')", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."}, "helpUri": "https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal", "id": "java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal", "name": "java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal", "properties": {"precision": "very-high", "tags": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "OWASP-A05:2017 - Broken Access Control", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.missing-internal.missing-internal", "id": "generic.nginx.security.missing-internal.missing-internal", "name": "generic.nginx.security.missing-internal.missing-internal", "properties": {"precision": "very-high", "tags": ["CWE-16: CWE CATEGORY: Configuration", "OWASP-A06:2017 - Security Misconfiguration", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls,and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling", "id": "generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling", "name": "generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling", "properties": {"precision": "very-high", "tags": ["CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')", "OWASP-A04:2021 - Insecure Design"]}, "shortDescription": {"text": "Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls,and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key", "id": "generic.secrets.security.detected-private-key.detected-private-key", "name": "generic.secrets.security.detected-private-key.detected-private-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Images should be tagged with an explicit version to produce deterministic container images."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-image-version.missing-image-version", "id": "generic.dockerfile.best-practice.missing-image-version.missing-image-version", "name": "generic.dockerfile.best-practice.missing-image-version.missing-image-version", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Images should be tagged with an explicit version to produce deterministic container images."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "NPM registry authentication token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token", "id": "generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token", "name": "generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "NPM registry authentication token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Twitter Access Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token", "id": "generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token", "name": "generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Twitter Access Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SonarQube Docs API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key", "id": "generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key", "name": "generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "SonarQube Docs API Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.insecure-ssl-version.insecure-ssl-version", "id": "generic.nginx.security.insecure-ssl-version.insecure-ssl-version", "name": "generic.nginx.security.insecure-ssl-version.insecure-ssl-version", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."}, "helpUri": "https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect", "id": "java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect", "name": "java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect", "properties": {"precision": "very-high", "tags": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.insecure-redirect.insecure-redirect", "id": "generic.nginx.security.insecure-redirect.insecure-redirect", "name": "generic.nginx.security.insecure-redirect.insecure-redirect", "properties": {"precision": "very-high", "tags": ["CWE-319: Cleartext Transmission of Sensitive Information", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.use-shell-instruction.use-shell-instruction", "id": "generic.dockerfile.best-practice.use-shell-instruction.use-shell-instruction", "name": "generic.dockerfile.best-practice.use-shell-instruction.use-shell-instruction", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "When performing yarn install, make sure to use the lockfile. Without `--frozen-lockfile`, yarn will update the lockfile rather than using the pinned versions."}, "helpUri": "https://semgrep.dev/r/generic.ci.security.use-frozen-lockfile.use-frozen-lockfile", "id": "generic.ci.security.use-frozen-lockfile.use-frozen-lockfile", "name": "generic.ci.security.use-frozen-lockfile.use-frozen-lockfile", "properties": {"precision": "very-high", "tags": ["CWE-494: Download of Code Without Integrity Check"]}, "shortDescription": {"text": "When performing yarn install, make sure to use the lockfile. Without `--frozen-lockfile`, yarn will update the lockfile rather than using the pinned versions."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket", "id": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket", "name": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket", "properties": {"precision": "very-high", "tags": ["CWE-319: Cleartext Transmission of Sensitive Information", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."}, "helpUri": "https://semgrep.dev/r/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg", "id": "java.java-jwt.security.jwt-none-alg.java-jwt-none-alg", "name": "java.java-jwt.security.jwt-none-alg.java-jwt-none-alg", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Using RSA without OAEP mode weakens the encryption."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding", "id": "java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding", "name": "java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Using RSA without OAEP mode weakens the encryption."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This 'dnf install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-dnf-assume-yes-switch.missing-dnf-assume-yes-switch", "id": "generic.dockerfile.best-practice.missing-dnf-assume-yes-switch.missing-dnf-assume-yes-switch", "name": "generic.dockerfile.best-practice.missing-dnf-assume-yes-switch.missing-dnf-assume-yes-switch", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This 'dnf install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SQL dump detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-sql-dump.detected-sql-dump", "id": "generic.secrets.security.detected-sql-dump.detected-sql-dump", "name": "generic.secrets.security.detected-sql-dump.detected-sql-dump", "properties": {"precision": "very-high", "tags": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "SQL dump detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Snyk API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key", "id": "generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key", "name": "generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Snyk API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Telegram Bot API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key", "id": "generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key", "name": "generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Telegram Bot API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Artifactory token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-artifactory-password.detected-artifactory-password", "id": "generic.secrets.security.detected-artifactory-password.detected-artifactory-password", "name": "generic.secrets.security.detected-artifactory-password.detected-artifactory-password", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Artifactory token detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme", "id": "generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme", "name": "generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme", "properties": {"precision": "very-high", "tags": ["CWE-16: CWE CATEGORY: Configuration", "OWASP-A06:2017 - Security Misconfiguration", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string", "id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string", "name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Generic API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-generic-api-key.detected-generic-api-key", "id": "generic.secrets.security.detected-generic-api-key.detected-generic-api-key", "name": "generic.secrets.security.detected-generic-api-key.detected-generic-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Generic API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "SAXReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.saxreader.owasp.java.xxe.org.dom4j.io.SAXReader", "id": "contrib.owasp.java.xxe.saxreader.owasp.java.xxe.org.dom4j.io.SAXReader", "name": "contrib.owasp.java.xxe.saxreader.owasp.java.xxe.org.dom4j.io.SAXReader", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A4: XML External Entities (XXE)"]}, "shortDescription": {"text": "SAXReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."}, "helpUri": "https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss", "id": "java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss", "name": "java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set. If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command. If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.set-pipefail.set-pipefail", "id": "generic.dockerfile.best-practice.set-pipefail.set-pipefail", "name": "generic.dockerfile.best-practice.set-pipefail.set-pipefail", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set. If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command. If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters,  blurring the line between what's trusted and untrusted,  and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request", "id": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request", "name": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request", "properties": {"precision": "very-high", "tags": ["CWE-501: Trust Boundary Violation", "OWASP-A04:2021 - Insecure Design"]}, "shortDescription": {"text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters,  blurring the line between what's trusted and untrusted,  and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "In $METHOD, $X is used to construct a SQL query via string concatenation."}, "helpUri": "https://semgrep.dev/r/java.jboss.security.session_sqli.find-sql-string-concatenation", "id": "java.jboss.security.session_sqli.find-sql-string-concatenation", "name": "java.jboss.security.session_sqli.find-sql-string-concatenation", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "In $METHOD, $X is used to construct a SQL query via string concatenation."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Stripe API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key", "id": "generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key", "name": "generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Stripe API Key detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "id": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "properties": {"precision": "very-high", "tags": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Google OAuth Access Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token", "id": "generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token", "name": "generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Google OAuth Access Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "CodeClimate detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-codeclimate.detected-codeclimate", "id": "generic.secrets.security.detected-codeclimate.detected-codeclimate", "name": "generic.secrets.security.detected-codeclimate.detected-codeclimate", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "CodeClimate detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a request with potential user-input going into a OutputStream or Writer object.  This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer", "id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer", "name": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A07:2017 - Cross-Site Scripting (XSS)", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Detected a request with potential user-input going into a OutputStream or Writer object.  This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters."}, "helpUri": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "name": "java.spring.security.injection.tainted-url-host.tainted-url-host", "properties": {"precision": "very-high", "tags": ["CWE-918: Server-Side Request Forgery (SSRF)", "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)"]}, "shortDescription": {"text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "A hard-coded credential was detected. It is not recommended  to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary.  It is recommended to use environment variables to  securely provide credentials or retrieve credentials from  a secure vault or HSM (Hardware Security Module)."}, "helpUri": "https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret", "id": "java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret", "name": "java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "A hard-coded credential was detected. It is not recommended  to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary.  It is recommended to use environment variables to  securely provide credentials or retrieve credentials from  a secure vault or HSM (Hardware Security Module)."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."}, "helpUri": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A01:2017 - Injection", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "AWS Account ID detected. This is a sensitive credential and should not be hardcoded here. Instead, read the value from an environment variable or keep the value in a separate, private file."}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-aws-account-id.detected-aws-account-id", "id": "generic.secrets.security.detected-aws-account-id.detected-aws-account-id", "name": "generic.secrets.security.detected-aws-account-id.detected-aws-account-id", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "AWS Account ID detected. This is a sensitive credential and should not be hardcoded here. Instead, read the value from an environment variable or keep the value in a separate, private file."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Artifactory token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-artifactory-token.detected-artifactory-token", "id": "generic.secrets.security.detected-artifactory-token.detected-artifactory-token", "name": "generic.secrets.security.detected-artifactory-token.detected-artifactory-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Artifactory token detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "RSA keys should be at least 2048 bits based on NIST recommendation."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key", "id": "java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key", "name": "java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "RSA keys should be at least 2048 bits based on NIST recommendation."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "AWS Session Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-aws-session-token.detected-aws-session-token", "id": "generic.secrets.security.detected-aws-session-token.detected-aws-session-token", "name": "generic.secrets.security.detected-aws-session-token.detected-aws-session-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "AWS Session Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "External entities are allowed for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true", "id": "java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true", "name": "java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2017 - XML External Entities (XXE)", "OWASP-A05:2021 - Security Misconfiguration"]}, "shortDescription": {"text": "External entities are allowed for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "AWS Secret Access Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key", "id": "generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key", "name": "generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "AWS Secret Access Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "A parameter being passed directly into java.net.URL function most likely lead to SSRF."}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url", "id": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url", "name": "contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url", "properties": {"precision": "very-high", "tags": ["CWE-918: Server-Side Request Forgery (SSRF)"]}, "shortDescription": {"text": "A parameter being passed directly into java.net.URL function most likely lead to SSRF."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch", "id": "generic.dockerfile.best-practice.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch", "name": "generic.dockerfile.best-practice.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Kolide API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key", "id": "generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key", "name": "generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Kolide API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.header-injection.header-injection", "id": "generic.nginx.security.header-injection.header-injection", "name": "generic.nginx.security.header-injection.header-injection", "properties": {"precision": "very-high", "tags": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The 'baseURL' is set to localhost. This may cause links to not work if deployed."}, "helpUri": "https://semgrep.dev/r/generic.hugo.best-practice.localhost-base-url.localhost-base-url", "id": "generic.hugo.best-practice.localhost-base-url.localhost-base-url", "name": "generic.hugo.best-practice.localhost-base-url.localhost-base-url", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "The 'baseURL' is set to localhost. This may cause links to not work if deployed."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.use-workdir.use-workdir", "id": "generic.dockerfile.best-practice.use-workdir.use-workdir", "name": "generic.dockerfile.best-practice.use-workdir.use-workdir", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context", "id": "java.lang.security.audit.weak-ssl-context.weak-ssl-context", "name": "java.lang.security.audit.weak-ssl-context.weak-ssl-context", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated", "id": "java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated", "name": "java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "PayPal Braintree Access Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token", "id": "generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token", "name": "generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "PayPal Braintree Access Token detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "MailChimp API Key detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key", "id": "generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key", "name": "generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "MailChimp API Key detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."}, "helpUri": "https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal", "id": "java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal", "name": "java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal", "properties": {"precision": "very-high", "tags": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "OWASP-A05:2017 - Broken Access Control", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Semgrep found a bash reverse shell"}, "helpUri": "https://semgrep.dev/r/generic.ci.security.bash-reverse-shell.bash_reverse_shell", "id": "generic.ci.security.bash-reverse-shell.bash_reverse_shell", "name": "generic.ci.security.bash-reverse-shell.bash_reverse_shell", "properties": {"precision": "very-high", "tags": ["CWE-94: Improper Control of Generation of Code ('Code Injection')", "OWASP-A03:2021 - Injection"]}, "shortDescription": {"text": "Semgrep found a bash reverse shell"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes."}, "helpUri": "https://semgrep.dev/r/generic.ci.audit.changed-semgrepignore.changed-semgrepignore", "id": "generic.ci.audit.changed-semgrepignore.changed-semgrepignore", "name": "generic.ci.audit.changed-semgrepignore.changed-semgrepignore", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector", "id": "java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector", "name": "java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector", "properties": {"precision": "very-high", "tags": ["CWE-329: Generation of Predictable IV with CBC Mode", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path."}, "helpUri": "https://semgrep.dev/r/generic.nginx.security.alias-path-traversal.alias-path-traversal", "id": "generic.nginx.security.alias-path-traversal.alias-path-traversal", "name": "generic.nginx.security.alias-path-traversal.alias-path-traversal", "properties": {"precision": "very-high", "tags": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "OWASP-A05:2017 - Broken Access Control", "OWASP-A01:2021 - Broken Access Control"]}, "shortDescription": {"text": "The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Semgrep found a bash reverse shell"}, "helpUri": "https://semgrep.dev/r/generic.ci.security.bash_reverse_shell", "id": "generic.ci.security.bash_reverse_shell", "name": "generic.ci.security.bash_reverse_shell", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "Semgrep found a bash reverse shell"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Google (GCM) Service account detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account", "id": "generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account", "name": "generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Google (GCM) Service account detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Digester being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.digester3-digester.owasp.java.xxe.org.apache.commons.digester3.Digester", "id": "contrib.owasp.java.xxe.digester3-digester.owasp.java.xxe.org.apache.commons.digester3.Digester", "name": "contrib.owasp.java.xxe.digester3-digester.owasp.java.xxe.org.apache.commons.digester3.Digester", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A4: XML External Entities (XXE)"]}, "shortDescription": {"text": "Digester being instantiated without calling the setFeature functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing"}, "helpUri": "https://semgrep.dev/r/contrib.owasp.java.xxe.xmlinputfactory.owasp.java.xxe.javax.xml.stream.XMLInputFactory", "id": "contrib.owasp.java.xxe.xmlinputfactory.owasp.java.xxe.javax.xml.stream.XMLInputFactory", "name": "contrib.owasp.java.xxe.xmlinputfactory.owasp.java.xxe.javax.xml.stream.XMLInputFactory", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A04:2021 - XML External Entities (XXE)"]}, "shortDescription": {"text": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Generic Secret detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-generic-secret.detected-generic-secret", "id": "generic.secrets.security.detected-generic-secret.detected-generic-secret", "name": "generic.secrets.security.detected-generic-secret.detected-generic-secret", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Generic Secret detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-zypper-clean.missing-zypper-clean", "id": "generic.dockerfile.best-practice.missing-zypper-clean.missing-zypper-clean", "name": "generic.dockerfile.best-practice.missing-zypper-clean.missing-zypper-clean", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle", "id": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle", "name": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Amazon MWS Auth Token detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token", "id": "generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token", "name": "generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Amazon MWS Auth Token detected"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."}, "helpUri": "https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher", "id": "java.lang.security.audit.crypto.no-null-cipher.no-null-cipher", "name": "java.lang.security.audit.crypto.no-null-cipher.no-null-cipher", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A03:2017 - Sensitive Data Exposure", "OWASP-A02:2021 - Cryptographic Failures"]}, "shortDescription": {"text": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This 'yum install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.best-practice.missing-yum-assume-yes-switch.missing-yum-assume-yes-switch", "id": "generic.dockerfile.best-practice.missing-yum-assume-yes-switch.missing-yum-assume-yes-switch", "name": "generic.dockerfile.best-practice.missing-yum-assume-yes-switch.missing-yum-assume-yes-switch", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "This 'yum install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch."}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "NPM token"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-npm-token.detected-npm-token", "id": "generic.secrets.security.detected-npm-token.detected-npm-token", "name": "generic.secrets.security.detected-npm-token.detected-npm-token", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "NPM token"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Outlook Team detected"}, "helpUri": "https://semgrep.dev/r/generic.secrets.security.detected-outlook-team.detected-outlook-team", "id": "generic.secrets.security.detected-outlook-team.detected-outlook-team", "name": "generic.secrets.security.detected-outlook-team.detected-outlook-team", "properties": {"precision": "very-high", "tags": ["CWE-798: Use of Hard-coded Credentials", "OWASP-A07:2021 - Identification and Authentication Failures"]}, "shortDescription": {"text": "Outlook Team detected"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "COPY instructions cannot copy from its own alias. The '$REF' alias is used before switching to a new image. If you meant to switch to a new image, include a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement."}, "helpUri": "https://semgrep.dev/r/generic.dockerfile.correctness.copy-from-own-alias.copy-from-own-alias", "id": "generic.dockerfile.correctness.copy-from-own-alias.copy-from-own-alias", "name": "generic.dockerfile.correctness.copy-from-own-alias.copy-from-own-alias", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "COPY instructions cannot copy from its own alias. The '$REF' alias is used before switching to a new image. If you meant to switch to a new image, include a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell."}, "helpUri": "https://semgrep.dev/r/generic.bicep.security.secure-parameter-for-secrets.secure-parameter-for-secrets", "id": "generic.bicep.security.secure-parameter-for-secrets.secure-parameter-for-secrets", "name": "generic.bicep.security.secure-parameter-for-secrets.secure-parameter-for-secrets", "properties": {"precision": "very-high", "tags": ["CWE-532: Insertion of Sensitive Information into Log File", "OWASP-A09:2021 - Security Logging and Monitoring Failures"]}, "shortDescription": {"text": "Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell."}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."}, "helpUri": "https://semgrep.dev/r/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization", "id": "java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization", "name": "java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization", "properties": {"precision": "very-high", "tags": ["CWE-502: Deserialization of Untrusted Data", "OWASP-A08:2017 - Insecure Deserialization", "OWASP-A08:2021 - Software and Data Integrity Failures"]}, "shortDescription": {"text": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."}}], "semanticVersion": "0.93.0"}}}], "version": "2.1.0"}